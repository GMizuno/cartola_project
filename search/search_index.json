{"config":{"lang":["pt"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#cartola_project","title":"cartola_project","text":"<p>First of all this project is used to improve my skills in Data Engineering and Python. In this project, I try to extract data from API, create Data Lake and analyse this data in BI tool like Preset.  Esse pacote consiste em resolver a primeira parte desse projeto, ou seja extrair dados da API, criando a infraestrutura necesaria para armazenar esses dados em algum storage.</p> <p>In the beginning I will collect information about first division of brazilian national league at the year of 2022. In the future I will expand this lakehouse to other tournament, the first one will Premier League (UK), the second La Liga (Spain) and last one Bundesliga (Germany). After all, I will collect information from previous years.</p>"},{"location":"#todo","title":"Todo","text":""},{"location":"#how-to-install","title":"How to install","text":""},{"location":"#using-github","title":"Using Github","text":"<p>To install this package using Github you can use Pip to install commando.</p> <p>Using Windows or Linux</p> <p><pre><code>pip install git+ssh://git@github.com/GMizuno/cartola_project.git\n</code></pre> Using Mac</p> <pre><code>pip3 install git+ssh://git@github.com/GMizuno/cartola_project.git\n</code></pre>"},{"location":"#using-pip","title":"Using Pip","text":"<p>Not implemented yet. Please wait, I will focus on this implementation</p>"},{"location":"api/","title":"Api","text":""},{"location":"api/#cartola_project.api.Fixtures","title":"<code>Fixtures</code>","text":"<p>         Bases: <code>Requester</code></p> Source code in <code>cartola_project/api.py</code> <pre><code>class Fixtures(Requester):\n    def _get_endpoint(self) -&gt; str:\n\"\"\"Generates fixture`s  the endpoint for the API\n        Returns:\n            Endpoint string\n        \"\"\"\n        return f\"{self.base_endpoint}fixtures\"\n\n    def _get_params(self, season_year: str, league_id: str) -&gt; List[dict]:\n\"\"\"Generate a list of parameters for the API\n\n        Args:\n            season_year: Season year (in european format this year could different)\n            league_id: Id of the league\n\n        Returns:\n            List containing a dict of the parameters league and season\n        \"\"\"\n        return [{\"league\": league_id, \"season\": season_year}]\n</code></pre>"},{"location":"api/#cartola_project.api.Matches","title":"<code>Matches</code>","text":"<p>         Bases: <code>Requester</code></p> Source code in <code>cartola_project/api.py</code> <pre><code>class Matches(Requester):\n    def _get_endpoint(self) -&gt; str:\n\"\"\"Generates the matches`s endpoint for the API\n        Returns:\n            Endpoint string\n        \"\"\"\n        return f\"{self.base_endpoint}fixtures/statistics\"\n\n    def _get_params(self, match_id: List[str]) -&gt; List[dict]:\n\"\"\"Generate a list of parameters for the API\n\n        Args:\n            match_id: List of match id\n\n        Returns:\n            List containing a dict of the parameters fixture that reporesents a match\n        \"\"\"\n        return [{\"fixture\": id} for id in match_id]\n</code></pre>"},{"location":"api/#cartola_project.api.Players","title":"<code>Players</code>","text":"<p>         Bases: <code>Requester</code></p> Source code in <code>cartola_project/api.py</code> <pre><code>class Players(Requester):\n    def _get_endpoint(self) -&gt; str:\n\"\"\"Generates the player`s endpoint for the API\n        Returns:\n            Endpoint string\n        \"\"\"\n        return f\"{self.base_endpoint}fixtures/players\"\n\n    def _get_params(self, match_id: List[str]) -&gt; List[dict]:\n\"\"\"Generate a list of parameters for the API.\n        This endpoint is used to get the players of a match.\n\n        Args:\n            match_id: List of match id\n\n        Returns:\n            List containing a dict of the parameters fixture that represents a match\n        \"\"\"\n        return [{\"fixture\": id} for id in match_id]\n</code></pre>"},{"location":"api/#cartola_project.api.Requester","title":"<code>Requester</code>","text":"<p>         Bases: <code>ABC</code></p> Source code in <code>cartola_project/api.py</code> <pre><code>class Requester(ABC):\n    def __init__(self, api_host_key: str, api_secert_key: str):\n\"\"\"Abstract base class for all API requesters.\n        Work as interface for all API requesters, forcing to implement some methods.\n        Also use an exteranl library for rate limiting and back-off exponential\n        to timing out requests.\n\n        Args:\n            api_host_key: Api credentials host key\n            api_secert_key: Api credentials secret key\n        \"\"\"\n        self.headers = {\n            \"X-RapidAPI-Host\": api_host_key,\n            \"X-RapidAPI-Key\": api_secert_key,\n        }\n        self.base_endpoint = \"https://api-football-v1.p.rapidapi.com/v3/\"\n\n    @abstractmethod\n    def _get_endpoint(self) -&gt; str:\n\"\"\"Abstract method to generate the endpoint for the API\"\"\"\n        raise NotImplementedError\n\n    @abstractmethod\n    def _get_params(self, **kwargs) -&gt; dict | list[dict]:\n\"\"\"Abstract method to generate the parameters for the API`\n        Args:\n            **kwargs: Some extra parameters for the API\n        \"\"\"\n        raise NotImplementedError\n\n    @backoff.on_exception(backoff.expo, requests.exceptions.HTTPError, max_tries=10, factor=10)\n    def get_response(self, endpoint: str, header: str, param: dict) -&gt; requests.Response:\n\"\"\"Concrete method to get the response from the API. This request method use\n        back-off exponential to timing out requests, with max retries and factor are set to 10.\n        Also only retry if the response is not 2xx.\n\n        Args:\n            endpoint: Endpoint string\n            header: Header for the request\n            param: Parameter for the request\n\n        Returns:\n            Response from the API\n        \"\"\"\n        print(f\"Request {endpoint} with {param} as parameter\")\n        response = requests.request(\"GET\", endpoint, headers=header, params=param)\n        response.raise_for_status()\n        return response\n\n    def get_data(self, **kwargs) -&gt; dict | list[dict]:\n\"\"\"Method to get the data from the API. This methods warperd _get_response_ to set\n        some parameters for the API.\n\n        Args:\n            **kwargs: Extra parameters for the API\n\n        Returns:\n            Json response from the API\n        \"\"\"\n        endpoint = self._get_endpoint()\n        params = self._get_params(**kwargs)\n        print(f\"Using endpoint {endpoint} with {len(params)} parameter(s)\")\n        responses_json = [\n            self.get_response(endpoint, self.headers, param).json() for param in params\n        ]\n        return responses_json\n</code></pre>"},{"location":"api/#cartola_project.api.Requester.__init__","title":"<code>__init__(api_host_key, api_secert_key)</code>","text":"<p>Abstract base class for all API requesters. Work as interface for all API requesters, forcing to implement some methods. Also use an exteranl library for rate limiting and back-off exponential to timing out requests.</p> <p>Parameters:</p> Name Type Description Default <code>api_host_key</code> <code>str</code> <p>Api credentials host key</p> required <code>api_secert_key</code> <code>str</code> <p>Api credentials secret key</p> required Source code in <code>cartola_project/api.py</code> <pre><code>def __init__(self, api_host_key: str, api_secert_key: str):\n\"\"\"Abstract base class for all API requesters.\n    Work as interface for all API requesters, forcing to implement some methods.\n    Also use an exteranl library for rate limiting and back-off exponential\n    to timing out requests.\n\n    Args:\n        api_host_key: Api credentials host key\n        api_secert_key: Api credentials secret key\n    \"\"\"\n    self.headers = {\n        \"X-RapidAPI-Host\": api_host_key,\n        \"X-RapidAPI-Key\": api_secert_key,\n    }\n    self.base_endpoint = \"https://api-football-v1.p.rapidapi.com/v3/\"\n</code></pre>"},{"location":"api/#cartola_project.api.Requester.get_data","title":"<code>get_data(**kwargs)</code>","text":"<p>Method to get the data from the API. This methods warperd get_response to set some parameters for the API.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <p>Extra parameters for the API</p> <code>{}</code> <p>Returns:</p> Type Description <code>dict | list[dict]</code> <p>Json response from the API</p> Source code in <code>cartola_project/api.py</code> <pre><code>def get_data(self, **kwargs) -&gt; dict | list[dict]:\n\"\"\"Method to get the data from the API. This methods warperd _get_response_ to set\n    some parameters for the API.\n\n    Args:\n        **kwargs: Extra parameters for the API\n\n    Returns:\n        Json response from the API\n    \"\"\"\n    endpoint = self._get_endpoint()\n    params = self._get_params(**kwargs)\n    print(f\"Using endpoint {endpoint} with {len(params)} parameter(s)\")\n    responses_json = [\n        self.get_response(endpoint, self.headers, param).json() for param in params\n    ]\n    return responses_json\n</code></pre>"},{"location":"api/#cartola_project.api.Requester.get_response","title":"<code>get_response(endpoint, header, param)</code>","text":"<p>Concrete method to get the response from the API. This request method use back-off exponential to timing out requests, with max retries and factor are set to 10. Also only retry if the response is not 2xx.</p> <p>Parameters:</p> Name Type Description Default <code>endpoint</code> <code>str</code> <p>Endpoint string</p> required <code>header</code> <code>str</code> <p>Header for the request</p> required <code>param</code> <code>dict</code> <p>Parameter for the request</p> required <p>Returns:</p> Type Description <code>requests.Response</code> <p>Response from the API</p> Source code in <code>cartola_project/api.py</code> <pre><code>@backoff.on_exception(backoff.expo, requests.exceptions.HTTPError, max_tries=10, factor=10)\ndef get_response(self, endpoint: str, header: str, param: dict) -&gt; requests.Response:\n\"\"\"Concrete method to get the response from the API. This request method use\n    back-off exponential to timing out requests, with max retries and factor are set to 10.\n    Also only retry if the response is not 2xx.\n\n    Args:\n        endpoint: Endpoint string\n        header: Header for the request\n        param: Parameter for the request\n\n    Returns:\n        Response from the API\n    \"\"\"\n    print(f\"Request {endpoint} with {param} as parameter\")\n    response = requests.request(\"GET\", endpoint, headers=header, params=param)\n    response.raise_for_status()\n    return response\n</code></pre>"},{"location":"api/#cartola_project.api.Teams","title":"<code>Teams</code>","text":"<p>         Bases: <code>Requester</code></p> Source code in <code>cartola_project/api.py</code> <pre><code>class Teams(Requester):\n    def _get_endpoint(self) -&gt; str:\n\"\"\"Generates the team`s endpoint for the API\n        Returns:\n            Endpoint string\n        \"\"\"\n        return f\"{self.base_endpoint}teams\"\n\n    def _get_params(self, team_id: List[str]) -&gt; List[dict]:\n\"\"\"Generate a list of parameters for the API\n\n        Args:\n            team_id: List of team id\n\n        Returns:\n            List containing a dict of the parameters id that reporesents a team\n        \"\"\"\n        return [{\"id\": id} for id in team_id]\n</code></pre>"},{"location":"reader/","title":"Reader","text":""},{"location":"reader/#cartola_project.reader.JSONReader","title":"<code>JSONReader</code>","text":"<p>         Bases: <code>Reader</code></p> <p>Concrete class to read data from a JSON file.</p> Source code in <code>cartola_project/reader.py</code> <pre><code>class JSONReader(Reader):\n\"\"\"Concrete class to read data from a JSON file.\"\"\"\n\n    def __init__(\n        self,\n        cloud_storage: CloudStorage,\n        bucket_name: str,\n        file_path: str,\n    ):\n        self.cloud_storage = cloud_storage\n        self.bucket_name = bucket_name\n        self.file_path = file_path\n\n    def read(self) -&gt; dict:\n\"\"\"Download the data from the storage.\n\n        Returns:\n            Json object.\n\n        \"\"\"\n        file = self.cloud_storage.download(\n            self.bucket_name,\n            self.file_path,\n        )\n        return json.loads(file.decode(\"utf-8\"))\n\n    def read_all_files(self) -&gt; list[dict]:\n\"\"\"Read all the data from the storage.\n\n        Returns:\n            List of Json objects.\n        \"\"\"\n        files = self.cloud_storage.list_files(\n            self.bucket_name,\n            self.file_path,\n        )\n        files_download = [\n            self.cloud_storage.download(\n                self.bucket_name,\n                file,\n            )\n            for file in files\n        ]\n        return [json.loads(file.decode(\"utf-8\")) for file in files_download]\n</code></pre>"},{"location":"reader/#cartola_project.reader.JSONReader.read","title":"<code>read()</code>","text":"<p>Download the data from the storage.</p> <p>Returns:</p> Type Description <code>dict</code> <p>Json object.</p> Source code in <code>cartola_project/reader.py</code> <pre><code>def read(self) -&gt; dict:\n\"\"\"Download the data from the storage.\n\n    Returns:\n        Json object.\n\n    \"\"\"\n    file = self.cloud_storage.download(\n        self.bucket_name,\n        self.file_path,\n    )\n    return json.loads(file.decode(\"utf-8\"))\n</code></pre>"},{"location":"reader/#cartola_project.reader.JSONReader.read_all_files","title":"<code>read_all_files()</code>","text":"<p>Read all the data from the storage.</p> <p>Returns:</p> Type Description <code>list[dict]</code> <p>List of Json objects.</p> Source code in <code>cartola_project/reader.py</code> <pre><code>def read_all_files(self) -&gt; list[dict]:\n\"\"\"Read all the data from the storage.\n\n    Returns:\n        List of Json objects.\n    \"\"\"\n    files = self.cloud_storage.list_files(\n        self.bucket_name,\n        self.file_path,\n    )\n    files_download = [\n        self.cloud_storage.download(\n            self.bucket_name,\n            file,\n        )\n        for file in files\n    ]\n    return [json.loads(file.decode(\"utf-8\")) for file in files_download]\n</code></pre>"},{"location":"reader/#cartola_project.reader.ParquetReader","title":"<code>ParquetReader</code>","text":"<p>         Bases: <code>Reader</code></p> <p>Concrete class to read data from a Parquet file.</p> Source code in <code>cartola_project/reader.py</code> <pre><code>class ParquetReader(Reader):\n\"\"\"Concrete class to read data from a Parquet file.\"\"\"\n\n    def __init__(\n        self,\n        cloud_storage: CloudStorage,\n        bucket_name: str,\n        file_path: str,\n    ):\n        self.file_path = file_path\n        self.bucket_name = bucket_name\n        self.cloud_storage = cloud_storage\n\n    def read(self) -&gt; pd.DataFrame:\n\"\"\"Read the data from the storage.\n        Use pandas tod read the data and return a pandas DataFrame\n\n        Returns:\n            Pandas DataFrame.\n        \"\"\"\n        file = self.cloud_storage.download(\n            self.bucket_name,\n            self.file_path,\n        )\n        pq_file = BytesIO(file)\n        return pd.read_parquet(pq_file)\n\n    def read_all_files(self) -&gt; pd.DataFrame:\n\"\"\"Read all the data from the storage.\n        Use pandas tod read the data and return a pandas DataFrame\n\n        Returns:\n            Pandas DataFrame.\n        \"\"\"\n        files = self.cloud_storage.list_files(\n            self.bucket_name,\n            self.file_path,\n        )\n\n        print(files)\n\n        files_download = [\n            self.cloud_storage.download(\n                self.bucket_name,\n                file,\n            )\n            for file in files\n        ]\n        return pd.concat([pd.read_parquet(BytesIO(file)) for file in files_download])\n</code></pre>"},{"location":"reader/#cartola_project.reader.ParquetReader.read","title":"<code>read()</code>","text":"<p>Read the data from the storage. Use pandas tod read the data and return a pandas DataFrame</p> <p>Returns:</p> Type Description <code>pd.DataFrame</code> <p>Pandas DataFrame.</p> Source code in <code>cartola_project/reader.py</code> <pre><code>def read(self) -&gt; pd.DataFrame:\n\"\"\"Read the data from the storage.\n    Use pandas tod read the data and return a pandas DataFrame\n\n    Returns:\n        Pandas DataFrame.\n    \"\"\"\n    file = self.cloud_storage.download(\n        self.bucket_name,\n        self.file_path,\n    )\n    pq_file = BytesIO(file)\n    return pd.read_parquet(pq_file)\n</code></pre>"},{"location":"reader/#cartola_project.reader.ParquetReader.read_all_files","title":"<code>read_all_files()</code>","text":"<p>Read all the data from the storage. Use pandas tod read the data and return a pandas DataFrame</p> <p>Returns:</p> Type Description <code>pd.DataFrame</code> <p>Pandas DataFrame.</p> Source code in <code>cartola_project/reader.py</code> <pre><code>def read_all_files(self) -&gt; pd.DataFrame:\n\"\"\"Read all the data from the storage.\n    Use pandas tod read the data and return a pandas DataFrame\n\n    Returns:\n        Pandas DataFrame.\n    \"\"\"\n    files = self.cloud_storage.list_files(\n        self.bucket_name,\n        self.file_path,\n    )\n\n    print(files)\n\n    files_download = [\n        self.cloud_storage.download(\n            self.bucket_name,\n            file,\n        )\n        for file in files\n    ]\n    return pd.concat([pd.read_parquet(BytesIO(file)) for file in files_download])\n</code></pre>"},{"location":"reader/#cartola_project.reader.Reader","title":"<code>Reader</code>","text":"<p>         Bases: <code>ABC</code></p> Source code in <code>cartola_project/reader.py</code> <pre><code>class Reader(ABC):\n    @abstractmethod\n    def read(self):\n\"\"\"Abstart method to read the data from the file.\"\"\"\n        raise NotImplementedError\n\n    @abstractmethod\n    def read_all_files(self, *args):\n\"\"\"Abstart method to read all the data from list of files.\n\n        Args:\n            *args:\n        \"\"\"\n        raise NotImplementedError\n</code></pre>"},{"location":"reader/#cartola_project.reader.Reader.read","title":"<code>read()</code>  <code>abstractmethod</code>","text":"<p>Abstart method to read the data from the file.</p> Source code in <code>cartola_project/reader.py</code> <pre><code>@abstractmethod\ndef read(self):\n\"\"\"Abstart method to read the data from the file.\"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reader/#cartola_project.reader.Reader.read_all_files","title":"<code>read_all_files(*args)</code>  <code>abstractmethod</code>","text":"<p>Abstart method to read all the data from list of files.</p> <p>Parameters:</p> Name Type Description Default <code>*args</code> <code>()</code> Source code in <code>cartola_project/reader.py</code> <pre><code>@abstractmethod\ndef read_all_files(self, *args):\n\"\"\"Abstart method to read all the data from list of files.\n\n    Args:\n        *args:\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"storage/","title":"Storage","text":""},{"location":"writer/","title":"Writer","text":""},{"location":"tansformations/helper/","title":"Helper","text":""},{"location":"tansformations/helper/#cartola_project.transformations.helpers.convert_date","title":"<code>convert_date(time)</code>","text":"<p>Convert time to date format</p> <p>Parameters:</p> Name Type Description Default <code>time</code> <code>str</code> <p>Time in string format</p> required Source code in <code>cartola_project/transformations/helpers.py</code> <pre><code>def convert_date(time: str) -&gt; str:\n\"\"\"Convert time to date format\n\n    Args:\n        time: Time in string format\n\n    Returns: Time in string format\n    \"\"\"\n    time = parser.parse(time)\n    return time.strftime(\"%d-%m-%Y\")\n</code></pre>"},{"location":"tansformations/helper/#cartola_project.transformations.helpers.convert_time","title":"<code>convert_time(time)</code>","text":"<p>Convert time to time format include hour and minute</p> <p>Parameters:</p> Name Type Description Default <code>time</code> <code>str</code> <p>Time in string format</p> required Source code in <code>cartola_project/transformations/helpers.py</code> <pre><code>def convert_time(time: str) -&gt; str:\n\"\"\"Convert time to time format include hour and minute\n\n    Args:\n        time: Time in string format\n\n    Returns: Time in string format\n    \"\"\"\n    time = parser.parse(time)\n    return time.strftime(\"%d-%m-%Y %H:%M\")\n</code></pre>"},{"location":"tansformations/transfomation/","title":"Transfomation","text":""}]}